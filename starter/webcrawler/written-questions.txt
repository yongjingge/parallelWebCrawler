    Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
    ---------------------------------------------------------------------------------------------------------------------------------------
    The profiler sums the duration of the parse method in all threads.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
        ---------------------------------------------------------------------------------------------------------------------------------------
        The parallel crawler as a parallel programme can have multiple threads be working on different tasks at the same time.
        It requires hardware and operating system support. With that said, this programme needs to be running on a computer with a multi-thread CPU,
        and operating system needs to have the required drivers. The old computer my manager used to run the parallel crawler may be incapable to
        support a parallel programme and demonstrate the performance of parallelism.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
        ---------------------------------------------------------------------------------------------------------------------------------------
        If we run the parallel web crawler on an advanced computer with a multi-thread CPU, it will outperform the single-threaded crawler with its
        parallel functionality.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
    ---------------------------------------------------------------------------------------------------------------------------------------
    The performance profiling.

    (b) What are the join points of the Profiler in the web crawler program?
    ---------------------------------------------------------------------------------------------------------------------------------------
    Methods in the web crawler programme annotated with @Profiled are designed to be checked and invoked with more flexibility.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
    ---------------------------------------------------------------------------------------------------------------------------------------
    Builder Pattern is used in 'CrawlResult' and 'CrawlTask'.
    I like Builder Pattern a lot for its convenience and capability of using method chaining.

    Dependency Injection is used across the project code.
    DI pattern is a bit hard to read at first glance. It will add difficulty in understanding the structure of the programme.
    However, it does provide better re-usability and testability.

    Proxy is used in ProfilerImpl.
    Dynamic Proxy and the InvocationHandler are not easy to implement, but they provide ability to implement interfaces that are only known at runtime,
    and avoid us from writing decorator code for many interfaces.

